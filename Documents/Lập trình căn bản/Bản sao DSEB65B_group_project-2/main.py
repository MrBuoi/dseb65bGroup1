import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import hashlib
import os
from pathlib import Path
import time
import base64
import time
import plotly.express as px
from streamlit_lottie import st_lottie
import requests
import streamlit.components.v1 as components
from src.auth.auth import login, register
from src.schedule.schedule_display import display_schedule  # Import display_schedule
from src.pomodoro.pomodoro_display import display_pomodoro
from src.Background import set_background
from src.Background import change_background
from src.Introduction import introduction
from src.Instruction_of_use import instruction_of_use

def main():
    # Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
    st.set_page_config(
    page_title="Qu·∫£n L√Ω Th·ªùi Gian v√† L·ªãch Tr√¨nh",
    page_icon="üïí",
    layout="wide",
    ) 
    set_background()
    ###################################################################################################
    df = px.data.iris()
    @st.cache_data
    def get_img_as_base64(file):
        with open(file, "rb") as f:
            data = f.read()
        encoded = base64.b64encode(data).decode()
        return encoded
    current_dir = os.path.dirname(os.path.abspath(__file__))
    assets_dir = os.path.join(current_dir, 'assets')
    img_path = os.path.join(assets_dir, '7.png')
    img1_path = os.path.join(assets_dir, 'Background.png')
    img = get_img_as_base64(img_path)
    img1 = get_img_as_base64(img1_path)
    page_bg_img = f"""
    <style>
    [data-testid="stAppViewContainer"] {{
        background-image: url("data:image/png;base64,{img}");
        background-size: 100%;
        background-repeat: no-repeat;
        background-attachment: local;
    }}
    [data-testid="stHeader"] {{
        background-color: rgba(0,0,0,0);
    }}
    [data-testid="stSidebar"] > div:first-child {{
        background-image: url("data:image/png;base64,{img1}");
        background-position: center; 
        background-repeat: no-repeat;
        background-attachment: fixed;
    }}
    [data-testid="stToolbar"] {{
    right: 2rem;
    }}
    </style>
    """
    # CSS t√πy ch·ªânh ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng hover v·ªõi animation cho sidebar
    st.markdown("""
    <style>
    /* N·ªÅn c·ªßa sidebar */
    .css-1aumxhk {
        background-color: #0d0c0c;
    }   
    /* T·∫°o animation khi hover Sidebar */
    .stSidebar .stSelectbox > div:hover {
        background-color: #E8E8E8;
        color: #c41414;
        transform: scale(1.1); /* Ph√≥ng to nh·∫π */
        transition: transform 0.2s ease, background-color 0.05s ease; /* Animation khi hover */
    }
    .stSelectbox > div:hover {
        background-color: #E8E8E8;
        transform: scale(1.1); /* Ph√≥ng to nh·∫π */
        transition: transform 0.2s ease, background-color 0.2s ease; /* Animation khi hover */
    }
    /* T·∫°o hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông nh·∫•p nh√°y */
    .stSidebar .stSelectbox > div:hover {
        animation: glow s ease-in-out infinite alternate; /* Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông nh·∫•p nh√°y */
    }
    .stSelectbox > div:hover {
        animation: glow 1s ease-in-out infinite alternate; /* Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông nh·∫•p nh√°y */
    }
    /* Tu·ª≥ ch·ªânh m√†u ti√™u ƒë·ªÅ SlectBox */
    .stSidebar .stSelectbox label {
        font-family: 'Arial', sans-serif; 
        font-size: 100px;
        color: #ffcc00; /* M√†u ch·ªØ c·ªßa ti√™u ƒë·ªÅ */
        font-weight: bold;
        margin-bottom: 0px;    /* Kho·∫£ng c√°ch d∆∞·ªõi */
        display: inline-block;
    }
    .stSelectbox label {
        font-family: 'Arial', sans-serif; 
        font-size: 50px;
        color: #ffcc00; /* M√†u ch·ªØ c·ªßa ti√™u ƒë·ªÅ */
        font-weight: bold;
    }
    
    /* T√πy ch·ªânh ph√¥ng ch·ªØ v√† hi·ªáu ·ª©ng c·ªßa c√°c m·ª•c ch·ªçn */
    .stSidebar .stSelectbox > div {
        background-color: #1c1c1e; /* M√†u n·ªÅn c·ªßa selectbox */
        color: white; /* M√†u ch·ªØ c·ªßa selectbox */
        font-size: 16px;
        border-radius: 10px;
        padding: 5px;
        transition: all 0.3s ease; /* Th·ªùi gian chuy·ªÉn ƒë·ªïi chung */
    }
    .stSelectbox > div {
        background-color: #1c1c1e; /* M√†u n·ªÅn c·ªßa selectbox */
        color: white; /* M√†u ch·ªØ c·ªßa selectbox */
        font-size: 16px;
        border-radius: 10px;
        padding: 5px;
        transition: all 0.3s ease; /* Th·ªùi gian chuy·ªÉn ƒë·ªïi chung */
    }
    
    /* Keyframes cho hi·ªáu ·ª©ng glow */
    @keyframes glow {
        from {
            box-shadow: 0 0 5px #ff6600, 0 0 10px #ff6600;
        }
        to {
            box-shadow: 0 0 20px #ffcc00, 0 0 30px #ffcc00;
        }
    }
    .custom-select select {
        display: none; /* ·∫®n ph·∫ßn t·ª≠ select g·ªëc */
    }
    .hover-3d {
    transition: transform 0.2s ease-in-out;
    }
    .hover-3d:hover {
    transform: rotateX(15deg) rotateY(15deg) scale(1.05);
    }
    </style>
    """, unsafe_allow_html=True)
    # ƒê·ªïi m√†u to√†n b·ªô Dropdown c·ªßa C√°c SelectBox trong ·ª©ng d·ª•ng
    st.markdown("""
        <style>
    /* Main container */
    [data-baseweb="select"] {
        background-color: #1E1E1E;
    } 
    /* Dropdown menu container */
    [data-baseweb="popover"] {
        background-color: #1E1E1E !important;
    }   
    /* Menu container */
    [data-baseweb="menu"] {
        background-color: #1E1E1E !important;
        padding: 0 !important;  /* Remove padding */
    }   
    /* Each option item */
    [data-baseweb="menu"] div[role="option"] {
        background-color: #1E1E1E !important;
        color: white !important;
        padding: 8px 16px !important;  /* Add padding to option itself */
        width: 100% !important;  /* Full width */
        margin: 0 !important;  /* Remove margin */
    }   
    /* Hover effect for options */
    [data-baseweb="menu"] div[role="option"]:hover {
        background-color: #06775F !important;
        color: white !important;
        width: 100% !important;
        margin: 0 !important;
        padding: 8px 16px !important;
    }    
    /* Selected option */
    [role="option"][aria-selected="true"] {
        background-color: #06775F !important;
        width: 100% !important;
    }    
    /* Override any default hover styles */
    [data-baseweb="menu"] div[role="option"][data-highlighted="true"] {
        background-color: #06775F !important;
        width: 100% !important;
    }   
    /* Remove any gaps or spaces */
    [data-baseweb="menu"] > div {
        padding: 0 !important;
        margin: 0 !important;
    }    
    /* Ensure the list takes full width */
    [data-baseweb="list"] {
        padding: 0 !important;
        margin: 0 !important;
        width: 100% !important;
    }
    </style>
    """, unsafe_allow_html=True)
    st.markdown(page_bg_img, unsafe_allow_html=True)
    def set_button_hover_style():
        st.markdown("""
        <style>
        /* Hi·ªáu ·ª©ng hover cho t·∫•t c·∫£ c√°c n√∫t trong ·ª©ng d·ª•ng */
        button:hover {
            background-color: #F6F5F4; /* M√†u n·ªÅn khi hover */
            color: white; /* M√†u ch·ªØ khi hover */
            transform: scale(1.15); /* Ph√≥ng to nh·∫π */
            transition: transform 0.5s ease, background-color 0.5s ease; /* Animation khi hover */
            border-radius: 10px; /* Bo g√≥c cho n√∫t */
            box-shadow: 0 0 10px rgba(255, 102, 0, 0.5); /* Hi·ªáu ·ª©ng b√≥ng */
            animation: glow 1s ease-in-out infinite alternate;
        }
        /* Hi·ªáu ·ª©ng khi nh·∫•n v√†o n√∫t */
        .stButton>button:active {
            transform: scale(0.98); /* Thu nh·ªè nh·∫π khi nh·∫•n */
         box-shadow: 0px 2px 4px rgba(255, 102, 0, 0.2); /* ƒê·ªï b√≥ng nh·∫π h∆°n khi nh·∫•n */
    }
        .bounce-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #06775F;
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    transition: transform 0.2s ease-in-out;
    }
        .bounce-button:hover {
    animation: bounce 1s infinite;
    }

    @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
    }
    40% {
    transform: translateY(-10px);
    }
    60% {
    transform: translateY(-5px);
    }
} 
        </style>
    """, unsafe_allow_html=True)
    # C·∫•u h√¨nh particles.js t√πy ch·ªânh cho ·ª©ng d·ª•ng h·ªçc t·∫≠p
    particles_js_config = '''
{
  "particles": {
    "number": {
      "value": 100,
      "density": {
        "enable": true,
        "value_area": 800
      }
    },
    "shape": {
      "type": "char",
      "character": {
        "value": ["A", "B", "C", "1", "2", "3", "Œ±", "Œ≤", "Œ≥"],
        "font": "Verdana",
        "style": "",
        "weight": "bold",
        "fill": true
      }
    },
    "color": {
      "value": "#00aaff"
    },
    "opacity": {
      "value": 0.8
    },
    "size": {
      "value": 16,
      "random": true
    },
    "move": {
      "enable": true,
      "speed": 2,
      "direction": "none",
      "out_mode": "out"
    }
  },
  "interactivity": {
    "events": {
      "onhover": {
        "enable": true,
        "mode": "repulse"
      },
      "onclick": {
        "enable": false
      }
    },
    "modes": {
      "repulse": {
        "distance": 100
      }
    }
  },
  "retina_detect": true
}
'''
    # G·ªçi h√†m n√†y ·ªü ƒë·∫ßu ·ª©ng d·ª•ng ƒë·ªÉ √°p d·ª•ng hi·ªáu ·ª©ng
    set_button_hover_style()
    ###################################################################################################
    # T√™n ·ª©ng d·ª•ng
    st.title("·ª®ng D·ª•ng Qu·∫£n L√Ω Th·ªùi Gian v√† L·ªãch Tr√¨nh ü§ù")
    # Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p trong session
    if 'is_logged_in' not in st.session_state:
        st.session_state['is_logged_in'] = False
        st.session_state['username'] = ''
    # Menu l·ª±a ch·ªçn gi·ªØa ƒêƒÉng nh·∫≠p v√† ƒêƒÉng k√Ω
    menu = ["ƒêƒÉng Nh·∫≠p", "ƒêƒÉng K√Ω"]
    option = st.sidebar.selectbox("User Account", menu)
    if not st.session_state['is_logged_in']:
        if option == "ƒêƒÉng Nh·∫≠p":
            if login():
                st.session_state.is_logged_in = True
        elif option == "ƒêƒÉng K√Ω":
            register()
    else:
        # Hi·ªÉn th·ªã menu ch√≠nh khi ƒë√£ ƒëƒÉng nh·∫≠p
        st.sidebar.success(f"ƒê√£ ƒëƒÉng nh·∫≠p: {st.session_state['username']}")
        # T·∫°o menu ch√≠nh
        main_menu = st.sidebar.selectbox(
            "Menu",
            ["Gi·ªõi Thi·ªáu ·ª®ng D·ª•ng","H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", "C√¥ng C·ª• H·ªçc T·∫≠p","ƒê·ªïi ·∫£nh n·ªÅn"]
    )
        if main_menu == "Gi·ªõi Thi·ªáu ·ª®ng D·ª•ng":
            st.balloons()
            st.snow()
            introduction()
        elif main_menu == "ƒê·ªïi ·∫£nh n·ªÅn":
            st.balloons()
            change_background()
        elif main_menu == "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng":
            st.balloons()
            instruction_of_use()
        elif main_menu == "C√¥ng C·ª• H·ªçc T·∫≠p":
            # T√≠nh nƒÉng b·ªï sung
            sub_menu = st.sidebar.selectbox(
                "C√°c C√¥ng C·ª• Ch√≠nh",
                ["Ph∆∞∆°ng Ph√°p Pomodoro", "Qu·∫£n l√Ω Th·ªùi gian bi·ªÉu", "Thi·∫øt L·∫≠p T√†i Kho·∫£n"]
            )
            # N·ªôi dung cho c√°c t√≠nh nƒÉng b·ªï sung
            if sub_menu == "Ph∆∞∆°ng Ph√°p Pomodoro":
                st.snow()
                display_pomodoro()
            elif sub_menu == "Qu·∫£n l√Ω Th·ªùi gian bi·ªÉu":
                st.snow()
                st.header("Qu·∫£n l√Ω th·ªùi gian h·ªçc t·∫≠p th√¥ng minh")
                if not st.session_state.is_logged_in:
                    st.warning("B·∫°n c·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p v√†o t√≠nh nƒÉng n√†y.")
                else:
                    # G·ªçi h√†m hi·ªÉn th·ªã l·ªãch tr√¨nh t·ª´ file kh√°c
                    display_schedule()    
        elif sub_menu == "Thi·∫øt L·∫≠p T√†i Kho·∫£n":
            st.balloons()
            st.header("‚öôÔ∏è Thi·∫øt L·∫≠p T√†i Kho·∫£n")
            st.write("...Thi·∫øt l·∫≠p t√†i kho·∫£n...")
        if st.sidebar.button("ƒêƒÉng xu·∫•t"):
            st.snow()
            st.balloons()
            st.session_state['is_logged_in'] = False
            st.session_state['username'] = ''
            st.toast('ƒêƒÉng xu·∫•t th√†nh c√¥ng')
            st.rerun()
if __name__ == "__main__":
    main() 